#!/bin/sh

usage() {
    cat << EOF
Usage: split-track [OPTIONS] [-if=input_file] [-df=data_file]
Split track: uses ffmpeg and a user-made csv file to cut a large audio file into many smaller ones.

Options:
    -D=delim, --delimiter=delim
        Sets the data file delimiter to \`delim\`. Delimiter is set to \`,\` by default

    -q, --quiet
        Quiet mode. Does not clear screen or display progress, just prints the ffmpeg output to stdout.

    -c, --clean
        Removes the input file and data file after completing successfully.

    -s, --get-safe-name
        Makes sure filename is "safe" by replaceing spaces with \`-\`, and uppercase letters with lowercase.

    -if=input_file, --input-file=input_file
        Sets the file that the script will cut to \`input_file\`

    -df=data_file, --data-file=data_file
        Sets the file that the script will use to cut \`input_file\` to \`data_file\`

Rules for data file:
  -  Must be of csv format.
  -  Delimiter is set to \`,\` by default.
  -  No fields may contain the delimiter (obviously).
  -  Fields may not be surrounded by quotes.
  -  The first field must give the start time, in the original file, for the new clip. Must be in HH:MM:SS format.
  -  The second field must contain the full filename of the clip to be created.
  -  The third field must contain the end time, in the original file, for the new clip. Must be in HH:MM:SS format.
NOTE: If no data file is specified, it will be read from stdin. This is meant for quick, single-file operations where making a whole spreadsheet might be cumbersome.
EOF
    exit 0
}

# Set defaults
data_file=/dev/stdin
IFS=,

# Check arguments
[ -z "$1" ] && echo "Argument(s) required. Try --help" && exit 1
[ "$1" = "--help" ] && usage

for arg in "$@"; do
    case "$arg" in 
        -if=*|--input-file=*) input_file="${arg#*=}";;
        -df=*|--data-file=*) data_file="${arg#*=}";;
        -D=*|--delimiter=*) IFS="${arg#*=}";;
        -q|--quiet) quiet=1;;
        -c|--clean) clean=1;;
        -s|--get-safe-name) safe=1;;
    esac
done

# Initialize file number
file_number=1
# Main loop
while read -r starttime name endtime; do
    # Convert times into seconds
    starttime_seconds=$(awk -F: '{ print ($1 * 3600) + ($2 * 60) + $3 }' <<< $starttime)
    endtime_seconds=$(awk -F: '{ print ($1 * 3600) + ($2 * 60) + $3 }' <<< $endtime)

    # Get duration in secs
    duration=$(($endtime_seconds-$starttime_seconds))

    # Ensure the filename is safe
    [ "$safe" = "1" ] && safename=$(sed 's/ /-/g;s/\,//g;s/[A-Z]/\L&/g' <<< $name) || safename=$name

    # Display progress
    [ "$quiet" != "1" ] &&
        tput clear &&
        tput cup $(tput lines) 0 &&
        total="$(bc <<< "scale=2;($file_number-1)/$(wc -l < $data_file)*100")%" &&
        [ "$data_file" != /dev/stdin ] &&
            echo -en "\r--- FILE #$file_number/$(wc -l < $data_file) --- NAME $safename --- TOTAL $total ---" ||
            echo -en "\r--- READING FROM STDIN --- NAME $safename ---" &&
        tput cup 0 0

    # Cut the file
    ffmpeg -nostdin -ss $starttime_seconds -i "$input_file" -t $duration -codec libopus "$safename" || exit "$?"
    # echo ffmpeg -nostdin -ss "$starttime_seconds" -i "$input_file" -t "$duration" -codec libopus "$safename"

    # Increment file number
    file_number=$((file_number+1))
done < "$data_file" && 
if [ "$clean" = "1" ] && [ "$data_file" != /dev/stdin ]; then
    rm "$input_file" "$data_file"
elif [ "$clean" = "1" ] && [ "$data_file" = /dev/stdin ]; then
    rm "$input_file"
fi
